shiny::runApp()
library("httr")
library("jsonlite")
library("dplyr")
base.uri.1 <- "http://api.nytimes.com/svc/archive/v1/"{year}/{month}{your-api-key}
base.uri.2 <- ".json?api-key="
api.key <- "3d4af681d88646f5afb0b40f2a1e510b"
uri <- paste0(base.uri.1, "2001","/","5",base.uri.2,api.key)
news.data <- fromJSON(content(GET(locate.rep), "text"))
base.uri.1 <- "http://api.nytimes.com/svc/archive/v1/"{year}/{month}{your-api-key}
base.uri.2 <- ".json?api-key="
api.key <- "3d4af681d88646f5afb0b40f2a1e510b"
uri <- paste0(base.uri.1, "2001","/","5",base.uri.2,api.key)
news.data <- fromJSON(content(GET(uri), "text"))
uri <- paste0(base.uri.1, "2001","/","5",base.uri.2,api.key)
base.uri.1 <- "http://api.nytimes.com/svc/archive/v1/"{year}/{month}{your-api-key}
base.uri.2 <- ".json?api-key="
api.key <- "3d4af681d88646f5afb0b40f2a1e510b"
uri <- paste0(base.uri.1, "2001","/","5",base.uri.2,api.key)
news.data <- fromJSON(content(GET(uri), "text"))
base.uri.1 <- "http://api.nytimes.com/svc/archive/v1/"{year}/{month}{your-api-key}
.1 <- "http://api.nytimes.com/svc/archive/v1/"
base.uri.2 <- ".json?api-key="
api.key <- "3d4af681d88646f5afb0b40f2a1e510b"
uri <- paste0(base.uri.1, "2001","/","5",base.uri.2,api.key)
news.data <- fromJSON(content(GET(uri), "text"))
base.uri.1 <- "http://api.nytimes.com/svc/archive/v1/"
base.uri.1 <- "http://api.nytimes.com/svc/archive/v1/"
base.uri.2 <- ".json?api-key="
api.key <- "3d4af681d88646f5afb0b40f2a1e510b"
uri <- paste0(base.uri.1, "2001","/","5",base.uri.2,api.key)
news.data <- fromJSON(content(GET(uri), "text"))
View(news.data)
news.data.table <- news.data %>%
select(response.docs.pub_date, response.docs.headline.main, response.docs.section_name) %>%
group_by(response.docs.section_name)
news.dataf <- flatten(news.data$results)
uri <- paste0(base.uri.1, "2001","/","5",base.uri.2,api.key)
news.data <- fromJSON(content(GET(uri), "text"))
View(news.data)
knitr::opts_chunk$set(echo = TRUE)
# Calling all the libraries needed.
library("httr")
library("jsonlite")
library("knitr")
library("dplyr")
library("ggplot2")
# Saving the zip code to be used in Local representative chunk
zip.code <- "98105"
# URI for the api to be used
base.uri <- "https://congress.api.sunlightfoundation.com"
# Search query for the bills
search.query <- "technology"
# Bill id & url for the particular bill used in Voting Issue chunk
roll.id <- "hr306-115"
bill.url <- "https://www.congress.gov/bill/115th/house-bill/306"
GetRepData <- function() {
# Function to return the list with representatives and senators data according to the zipcode provided in the setup chunk.
# This function gets the data from the api use the GET method and the extract the data in a JSON from which it then converts into a list of data.
locate.uri <- "/legislators/locate?zip="
locate.rep <- paste0(base.uri,locate.uri,zip.code)
rep.data.body <- fromJSON(content(GET(locate.rep), "text"))
View(rep.data.body)
rep.dataf <- flatten(rep.data.body$results)
View(rep.dataf)
rep.info <- list(firstname = rep.dataf$first_name, lastname = rep.dataf$last_name, state = rep.dataf$state, party = rep.dataf$party, phone = rep.dataf$phone,   bio_id = rep.dataf$bioguide_id)
return(rep.info)
}
GetRepData <- function() {
# Function to return the list with representatives and senators data according to the zipcode provided in the setup chunk.
# This function gets the data from the api use the GET method and the extract the data in a JSON from which it then converts into a list of data.
locate.uri <- "/legislators/locate?zip="
locate.rep <- paste0(base.uri,locate.uri,zip.code)
rep.data.body <- fromJSON(content(GET(locate.rep), "text"))
View(rep.data.body)
rep.dataf <- flatten(rep.data.body$results)
View(rep.dataf)
rep.info <- list(firstname = rep.dataf$first_name, lastname = rep.dataf$last_name, state = rep.dataf$state, party = rep.dataf$party, phone = rep.dataf$phone,   bio_id = rep.dataf$bioguide_id)
return(rep.info)
}
# Calling the methd=od to return the list of data about the memebers.
list.zip <- GetRepData()
PrintInfo <- function(list, row) {
# Function to print the list of data about the members in the required format.
state.party <- paste0("(", list[[3]][row], "-", list[[4]][row], ").")
return(paste(list[[1]][row], list[[2]][row], state.party, "Phone:", list[[5]][row]))
}
# In the markdown, there are print commands to print the list of values as required. It also consists of code to render image of the senators.
news.dataf <- flatten(news.data$response)
news.dataf <- flatten(news.data$response)
is.data.frame(news.data)
news.dataf <- flatten(news.data$response)
is.data.frame(rep.data.body)
GetRepData <- function() {
# Function to return the list with representatives and senators data according to the zipcode provided in the setup chunk.
# This function gets the data from the api use the GET method and the extract the data in a JSON from which it then converts into a list of data.
locate.uri <- "/legislators/locate?zip="
locate.rep <- paste0(base.uri,locate.uri,zip.code)
rep.data.body <- fromJSON(content(GET(locate.rep), "text"))
is.data.frame(rep.data.body)
rep.dataf <- flatten(rep.data.body$results)
rep.info <- list(firstname = rep.dataf$first_name, lastname = rep.dataf$last_name, state = rep.dataf$state, party = rep.dataf$party, phone = rep.dataf$phone,   bio_id = rep.dataf$bioguide_id)
return(rep.info)
}
# Calling the methd=od to return the list of data about the memebers.
list.zip <- GetRepData()
PrintInfo <- function(list, row) {
# Function to print the list of data about the members in the required format.
state.party <- paste0("(", list[[3]][row], "-", list[[4]][row], ").")
return(paste(list[[1]][row], list[[2]][row], state.party, "Phone:", list[[5]][row]))
}
# In the markdown, there are print commands to print the list of values as required. It also consists of code to render image of the senators.
knitr::opts_chunk$set(echo = TRUE)
# Calling all the libraries needed.
library("httr")
library("jsonlite")
library("knitr")
library("dplyr")
library("ggplot2")
# Saving the zip code to be used in Local representative chunk
zip.code <- "98105"
# URI for the api to be used
base.uri <- "https://congress.api.sunlightfoundation.com"
# Search query for the bills
search.query <- "technology"
# Bill id & url for the particular bill used in Voting Issue chunk
roll.id <- "hr306-115"
bill.url <- "https://www.congress.gov/bill/115th/house-bill/306"
GetRepData <- function() {
# Function to return the list with representatives and senators data according to the zipcode provided in the setup chunk.
# This function gets the data from the api use the GET method and the extract the data in a JSON from which it then converts into a list of data.
locate.uri <- "/legislators/locate?zip="
locate.rep <- paste0(base.uri,locate.uri,zip.code)
rep.data.body <- fromJSON(content(GET(locate.rep), "text"))
is.data.frame(rep.data.body)
rep.dataf <- flatten(rep.data.body$results)
rep.info <- list(firstname = rep.dataf$first_name, lastname = rep.dataf$last_name, state = rep.dataf$state, party = rep.dataf$party, phone = rep.dataf$phone,   bio_id = rep.dataf$bioguide_id)
return(rep.info)
}
# Calling the methd=od to return the list of data about the memebers.
list.zip <- GetRepData()
PrintInfo <- function(list, row) {
# Function to print the list of data about the members in the required format.
state.party <- paste0("(", list[[3]][row], "-", list[[4]][row], ").")
return(paste(list[[1]][row], list[[2]][row], state.party, "Phone:", list[[5]][row]))
}
# In the markdown, there are print commands to print the list of values as required. It also consists of code to render image of the senators.
GetRepData <- function() {
# Function to return the list with representatives and senators data according to the zipcode provided in the setup chunk.
# This function gets the data from the api use the GET method and the extract the data in a JSON from which it then converts into a list of data.
locate.uri <- "/legislators/locate?zip="
locate.rep <- paste0(base.uri,locate.uri,zip.code)
rep.data.body <- fromJSON(content(GET(locate.rep), "text"))
is.data.frame(rep.data.body)
rep.dataf <- flatten(rep.data.body$results)
rep.info <- list(firstname = rep.dataf$first_name, lastname = rep.dataf$last_name, state = rep.dataf$state, party = rep.dataf$party, phone = rep.dataf$phone,   bio_id = rep.dataf$bioguide_id)
return(rep.info)
}
# Calling the methd=od to return the list of data about the memebers.
list.zip <- GetRepData()
PrintInfo <- function(list, row) {
# Function to print the list of data about the members in the required format.
state.party <- paste0("(", list[[3]][row], "-", list[[4]][row], ").")
return(paste(list[[1]][row], list[[2]][row], state.party, "Phone:", list[[5]][row]))
}
# In the markdown, there are print commands to print the list of values as required. It also consists of code to render image of the senators.
# Saving the zip code to be used in Local representative chunk
zip.code <- "98105"
# URI for the api to be used
base.uri <- "https://congress.api.sunlightfoundation.com"
# Search query for the bills
search.query <- "technology"
# Bill id & url for the particular bill used in Voting Issue chunk
roll.id <- "hr306-115"
bill.url <- "https://www.congress.gov/bill/115th/house-bill/306"
locate.uri <- "/legislators/locate?zip="
locate.rep <- paste0(base.uri,locate.uri,zip.code)
rep.data.body <- fromJSON(content(GET(locate.rep), "text"))
is.data.frame(rep.data.body)
rep.dataf <- flatten(rep.data.body$results)
rep.info <- list(firstname = rep.dataf$first_name, lastname = rep.dataf$last_name, state = rep.dataf$state, party = rep.dataf$party, phone = rep.dataf$phone,   bio_id = rep.dataf$bioguide_id)
# Saving the zip code to be used in Local representative chunk
zip.code <- "98105"
# URI for the api to be used
base.uri <- "https://congress.api.sunlightfoundation.com"
# Search query for the bills
search.query <- "technology"
# Bill id & url for the particular bill used in Voting Issue chunk
roll.id <- "hr306-115"
bill.url <- "https://www.congress.gov/bill/115th/house-bill/306"
locate.uri <- "/legislators/locate?zip="
locate.rep <- paste0(base.uri,locate.uri,zip.code)
rep.data.body <- fromJSON(content(GET(locate.rep), "text"))
is.data.frame(rep.data.body)
rep.dataf <- flatten(rep.data.body$results)
rep.info <- list(firstname = rep.dataf$first_name, lastname = rep.dataf$last_name, state = rep.dataf$state, party = rep.dataf$party, phone = rep.dataf$phone,   bio_id = rep.dataf$bioguide_id)
bill.url <- "https://www.congress.gov/bill/115th/house-bill/306"
locate.uri <- "/legislators/locate?zip="
locate.rep <- paste0(base.uri,locate.uri,zip.code)
rep.data.body <- fromJSON(content(GET(locate.rep), "text"))
is.data.frame(rep.data.body)
rep.dataf <- flatten(rep.data.body$results)
is.data.frame(rep.dataf)
base.uri.1 <- "http://api.nytimes.com/svc/archive/v1/"
base.uri.2 <- ".json?api-key="
api.key <- "3d4af681d88646f5afb0b40f2a1e510b"
uri <- paste0(base.uri.1, "2001","/","5",base.uri.2,api.key)
news.data <- fromJSON(content(GET(uri), "text"))
View(news.data)
is.data.frame(news.data)
news.dataf <- flatten(news.data$response)
base.uri.1 <- "http://api.nytimes.com/svc/archive/v1/"
base.uri.2 <- ".json?api-key="
api.key <- "3d4af681d88646f5afb0b40f2a1e510b"
uri <- paste0(base.uri.1, "2001","/","5",base.uri.2,api.key)
news.data <- fromJSON(content(GET(uri), "text"))
View(news.data)
news.data <- data.frame(news.data)
news.data <- flatten(news.data$response)
news.data <- data.frame(news.data)
news.data <- flatten(news.data$response)
news.data <- flatten(news.data$response)
news.data <- flatten(news.data$response)
news.data <- flatten(news.data$response)
news.data <- flatten(news.data$response)
news.data <- flatten(news.data$response)
news.data <- flatten(news.data$response)
news.data <- flatten(news.data$response)
news.data <- flatten(news.data$response)
news.data <- flatten(news.data$response)
news.data <- flatten(news.data$response)
library("httr")
library("jsonlite")
library("dplyr")
base.uri.1 <- "http://api.nytimes.com/svc/archive/v1/"
base.uri.2 <- ".json?api-key="
api.key <- "3d4af681d88646f5afb0b40f2a1e510b"
uri <- paste0(base.uri.1, "2001","/","5",base.uri.2,api.key)
news.data <- fromJSON(content(GET(uri), "text"))
View(news.data)
news.data <- data.frame(news.data)
news.data <- flatten(news.data$response)
uri <- paste0(base.uri.1, "2001","/","5",base.uri.2,api.key)
View(uri)
uri <- paste0(base.uri.1, "2001","/","5",base.uri.2,api.key)
print(uri)
uri <- paste0(base.uri.1, "2001","/","5",base.uri.2,api.key)
news.data <- fromJSON(content(GET(uri), "text"))
View(news.data)
news.data <- flatten(news.data$response)
uri <- paste0(base.uri.1, "2001","/","5",base.uri.2,api.key)
news.data <- fromJSON(content(GET(uri), "text"))
news.dataf <- flatten(news.data$response)
View(news.dataf)
news.dataf <- flatten(news.data$response)
uri <- paste0(base.uri.1, "2001","/","5",base.uri.2,api.key)
news.data <- fromJSON(content(GET(uri), "text"))
news.dataf <- flatten(news.data$response)
news.data <- fromJSON(content(GET(uri), "text"))
news.dataf <- flatten(news.data$response, recursive = TRUE)
news.data <- list(news.data)
news.dataf <- flatten(news.data$response, recursive = TRUE)
news.dataf <- flatten(news.data$response)
news.dataf <- flatten(news.data$response)
news.dataf <- flatten(news.data$response)
news.dataf <- flatten(news.data$response)
news.dataf <- flatten(news.data$response)
news.dataf <- flatten(news.data$response)
news.data <- fromJSON(content(GET(uri), "text"))
news.data <- data.frame(news.data)
news.dataf <- flatten(news.data$response)
news.data <- fromJSON(content(GET(uri), "text"))
news.dataf <- flatten(news.data$response)
news.dataf <- data.frame(news.data)
is.data.frame(news.dataf)
news.dataf.1 <- flatten(news.dataf$response)
news.dataf.1 <- flatten(news.dataf$response)
print(uri)
news.data <- data.frame(news.data)
news.data.table <- news.data %>%
select(response.docs.pub_date, response.docs.headline.main, response.docs.section_name) %>%
group_by(response.docs.section_name)
news.data <- data.frame(news.data)
View(news.data)
uri <- paste0(base.uri.1, "2001","/","5",base.uri.2,api.key)
news.data <- fromJSON(content(GET(uri), "text"))
news.data <- data.frame(news.data)
View(news.data)
news.data.table <- news.data %>%
select(response.docs.pub_date)
news.data.table <- news.data %>%
select(response.docs.pub_date) #%>%
#group_by(response.docs.section_name)
View(news.data.table)
uri <- paste0(base.uri.1, "2001","/","5",base.uri.2,api.key)
news.data <- fromJSON(content(GET(uri), "text"))
news.data <- data.frame(news.data)
View(news.data)
news.data.table <- news.data %>%
select(response.docs.pub_date, response.docs.headline.main) #%>%
#group_by(response.docs.section_name)
View(news.data.table)
print(uri)
uri <- paste0(base.uri.1, "2001","/","5",base.uri.2,api.key)
news.data <- fromJSON(content(GET(uri), "text"))
View(news.data)
news.data
names(news.data)
news.dataf <- flatten(news.data$response)
news.dataf <- list(news.data$response)
news.datf.1 <- flatten(news.datf.1$response)
news.dataf <- list(news.data$response)
news.dataf <- data.frame(news.data$response)
names(news.dataf)
news.dataf <- news.dataf$docs
names(news.dataf)
(uri <- paste0(base.uri.1, "2001","/","5",base.uri.2,api.key)
news.data <- fromJSON(content(GET(uri), "text")))
news.dataf <- news.data$response
news.dataf <- data.frame(news.dataf)
View(news.dataf)
names(news.dataf)
news.data.table <- news.dataf %>%
select(docs.pub_date, docs.section_name, docs.headline)
View(news.data.table)
news.data.table <- news.dataf %>%
select(docs.pub_date, docs.section_name, docs.headline.main)
news.data.table <- news.dataf %>%
select(docs.pub_date, docs.section_name, docs.headline)
news.data.table <- news.dataf %>%
select(docs.pub_date, docs.section_name, docs.headline) %>%
select(docs.pub_date, docs.section_name, docs.headline.main)
news.data.table <- news.dataf %>%
select(docs.pub_date, docs.section_name, docs.headline$main)
news.data.headline <- flatten(news.data.table$docs.headline)
View(news.data.headline)
final.data <- data.frame(news.data.table$docs.pub_date, news.data.table$docs.section_name, news.data.headline$main)
View(final.data)
View(news.data)
news.data.response <- news.data$response
names(news.data.response)
news.data.response.meta <- news.data.response$meta
names(news.data.response.meta)
news.data.response.docs <- news.data.response$docs
names(news.data.response.docs)
news.data.response.docs.headline <- news.data.response.docs$headline
names(news.data.response.docs.headline)
news.data.table <- data.frame(news.data.response.docs$pub_date, news.data.response.docs$section_name,
news.data.response.docs.headline$main, news.data.response.docs$snippet, news.data.response.docs$web_url)
View(news.data.table)
names(news.data.response)
names(news.data.response.docs)
news.data.response.docs.keywords <- news.data.response.docs$keywords
names(news.data.response.docs.keywords)
news.data.response.docs.keywords <- news.data.response.docs$keywords
names(news.data.response.docs.keywords)
news.data.response.docs.keywords <- news.data.response.docs$keywords
View(news.data.response.docs.keywords)
news.data.table <- data.frame(news.data.response.docs$pub_date, news.data.response.docs$section_name,
news.data.response.docs.headline$main, news.data.response.docs$snippet, news.data.response.docs$web_url)
colnames(news.data.table) <- c("Publication Date", "Section", "Headline", "Snippet", "URL")
colnames(news.data.table) <- c("Publication Date", "Section", "Headline", "Snippet", "URL")
View(news.data.table)
news.data.table$Headline <- paste0("<a href='",news.data.table$URL,"'>",news.data.table$Headline,"</a>")
View(news.data.table)
news.data.table$Section <- str_replace_na(news.data.table$Section, replacement = "Other")
library("stringr")
news.data.table$Section <- str_replace_na(news.data.table$Section, replacement = "Other")
View(news.data.table)
news.data.table$`Publication Date` <- str_sub(news.data.table$`Publication Date`, 1, 11)
View(news.data.table)
news.data.table$`Publication Date` <- str_sub(news.data.table$`Publication Date`, 1, 10)
View(news.data.table)
news.data.response <- news.data$response
news.data.response.docs <- news.data.response$docs
news.data.response.docs.headline <- news.data.response.docs$headline
news.data.response.docs.keywords <- news.data.response.docs$keywords
news.data.table <- data.frame(news.data.response.docs$pub_date, news.data.response.docs$section_name,
news.data.response.docs.headline$main, news.data.response.docs$snippet, news.data.response.docs$web_url)
colnames(news.data.table) <- c("Publication Date", "Section", "Headline")
news.data.table$Headline <- paste0("<a href='",news.data.response.docs$web_url,"'>",news.data.table$Headline,"</a>")
news.data.table$Section <- str_replace_na(news.data.table$Section, replacement = "Other")
news.data.table$`Publication Date` <- str_sub(news.data.table$`Publication Date`, 1, 10)
View(news.data.table)
news.data.table <- data.frame(news.data.response.docs$pub_date, news.data.response.docs$section_name,
news.data.response.docs.headline$main)
colnames(news.data.table) <- c("Publication Date", "Section", "Headline")
news.data.table$Headline <- paste0("<a href='",news.data.response.docs$web_url,"'>",news.data.table$Headline,"</a>")
news.data.table$Section <- str_replace_na(news.data.table$Section, replacement = "Other")
news.data.table$`Publication Date` <- str_sub(news.data.table$`Publication Date`, 1, 10)
news.data.response <- news.data$response
news.data.response.docs <- news.data.response$docs
news.data.response.docs.headline <- news.data.response.docs$headline
news.data.response.docs.keywords <- news.data.response.docs$keywords
news.data.table <- data.frame(news.data.response.docs$pub_date,
news.data.response.docs.headline$main, news.data.response.docs$section_name)
colnames(news.data.table) <- c("Publication Date", "Section", "Headline")
news.data.table$Headline <- paste0("<a href='",news.data.response.docs$web_url,"'>",news.data.table$Headline,"</a>")
news.data.table$Section <- str_replace_na(news.data.table$Section, replacement = "Other")
news.data.table$`Publication Date` <- str_sub(news.data.table$`Publication Date`, 1, 10)
news.data.response <- news.data$response
news.data.response.docs <- news.data.response$docs
news.data.response.docs.headline <- news.data.response.docs$headline
news.data.response.docs.keywords <- news.data.response.docs$keywords
news.data.table <- data.frame(news.data.response.docs$pub_date,
news.data.response.docs.headline$main, news.data.response.docs$section_name)
colnames(news.data.table) <- c("Publication Date", "Headline", "Section")
news.data.table$Headline <- paste0("<a href='",news.data.response.docs$web_url,"'>",news.data.table$Headline,"</a>")
news.data.table$Section <- str_replace_na(news.data.table$Section, replacement = "Other")
news.data.table$`Publication Date` <- str_sub(news.data.table$`Publication Date`, 1, 10)
library("httr")
library("jsonlite")
library("dplyr")
library("stringr")
base.uri.1 <- "http://api.nytimes.com/svc/archive/v1/"
base.uri.2 <- ".json?api-key="
api.key <- "3d4af681d88646f5afb0b40f2a1e510b"
(uri <- paste0(base.uri.1, "2001","/","5",base.uri.2,api.key)
news.data <- fromJSON(content(GET(uri), "text")))
news.data.response <- news.data$response
news.data.response.docs <- news.data.response$docs
news.data.response.docs.headline <- news.data.response.docs$headline
news.data.response.docs.keywords <- news.data.response.docs$keywords
news.data.table <- data.frame(news.data.response.docs$pub_date,
news.data.response.docs.headline$main, news.data.response.docs$section_name)
colnames(news.data.table) <- c("Publication Date", "Headline", "Section")
news.data.table$Headline <- paste0("<a href='",news.data.response.docs$web_url,"'>",news.data.table$Headline,"</a>")
news.data.table$Section <- str_replace_na(news.data.table$Section, replacement = "Other")
news.data.table$`Publication Date` <- str_sub(news.data.table$`Publication Date`, 1, 10)
base.uri.1 <- "http://api.nytimes.com/svc/archive/v1/"
base.uri.2 <- ".json?api-key="
api.key <- "3d4af681d88646f5afb0b40f2a1e510b"
(uri <- paste0(base.uri.1, "2001","/","5",base.uri.2,api.key)
news.data <- fromJSON(content(GET(uri), "text")))
news.data.response <- news.data$response
news.data.response.docs <- news.data.response$docs
news.data.response.docs.headline <- news.data.response.docs$headline
news.data.response.docs.keywords <- news.data.response.docs$keywords
news.data.table <- data.frame(news.data.response.docs$pub_date,
news.data.response.docs.headline$main, news.data.response.docs$section_name)
colnames(news.data.table) <- c("Publication Date", "Headline", "Section")
news.data.table$Headline <- paste0("<a href='",news.data.response.docs$web_url,"'>",news.data.table$Headline,"</a>")
news.data.table$Section <- str_replace_na(news.data.table$Section, replacement = "Other")
news.data.table$`Publication Date` <- str_sub(news.data.table$`Publication Date`, 1, 10)
uri <- paste0(base.uri.1, "2001","/","5",base.uri.2,api.key)
news.data <- fromJSON(content(GET(uri), "text")))
uri <- paste0(base.uri.1, "2001","/","5",base.uri.2,api.key)
news.data <- fromJSON(content(GET(uri), "text"))
news.data.response <- news.data$response
news.data.response.docs <- news.data.response$docs
news.data.response.docs.headline <- news.data.response.docs$headline
news.data.response.docs.keywords <- news.data.response.docs$keywords
news.data.table <- data.frame(news.data.response.docs$pub_date,
news.data.response.docs.headline$main, news.data.response.docs$section_name)
colnames(news.data.table) <- c("Publication Date", "Headline", "Section")
news.data.table$Headline <- paste0("<a href='",news.data.response.docs$web_url,"'>",news.data.table$Headline,"</a>")
news.data.table$Section <- str_replace_na(news.data.table$Section, replacement = "Other")
news.data.table$`Publication Date` <- str_sub(news.data.table$`Publication Date`, 1, 10)
View(news.data.table)
news.data.table$Day <- str_sub(news.data.table$`Publication Date`, 9, 10)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
